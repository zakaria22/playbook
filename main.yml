---
# - hosts: all
#   remote_user: zak
#   become: yes
#   become_user: root
#   become_method: sudo

- hosts: all # group of targets
  #gather_facts: False # get information of plateform running on - False - cuz it required python (if true get error)
  remote_user: zak
  become: yes
  become_user: root
  become_method: sudo

  tasks: 
    # - name: create docker container {{ item }} 
    #   raw: docker run -dit --name ub{{ item }}  ubuntu /bin/bash
    #   with_sequence: "count=4"

    - name: get slaves ip 
      shell: "docker container inspect -f '{''{range .NetworkSettings.Networks}''}''{''{.IPAddress}''}''{''{end}''}' ub'{{ item }}'"
      with_sequence: "count=4"
      register: ip_container

    - set_fact:
        mysequence: "{{ ip_container.results | map(attribute='stdout') | list }}"

    - name: save to file 
      copy: 
        content: "{{ ip_container.results | map(attribute='stdout') | list }}"
        dest: '/home/zak/properties'

    - name: format ip
      shell: sed -i -e 's/"//' properties && sed -i -e 's/\]//' properties && sed -i -e 's/\[//' properties && sed -i -e 's/"//' properties
      # raw: sed -i -e 's/\]//' properties
      # raw: sed -i -e 's/\[//' properties
     

    # - debug: var=item
    #   with_items: "{{ ip_container.results | map(attribute='stdout_lines') | list }}"

    # - name: get docker container {{ item }} ip
    #   shell: "docker container inspect -f '{''{range .NetworkSettings.Networks}''}''{''{.IPAddress}''}''{''{end}''}' ub{{ item }}"
    #   register: ip_container
    #   with_sequence: "count=4"
      
# - group:
#         name: "group{{ item }}"
#         state: present
#       with_sequence:
#         count: 4

  # roles:
  #   - run_test
